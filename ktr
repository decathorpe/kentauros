#!/usr/bin/env python3

"""
ktr is kentauros.py
"""

import glob
import os

from kentauros.actions import ACTION_DICT
from kentauros.definitions import ActionType

from kentauros.init import log
from kentauros.init.cli import CLI_ARGS

from kentauros.config import KTR_CONF
from kentauros.bootstrap import ktr_bootstrap

from kentauros.package import Package


LOGPREFIX1 = "ktr: "
LOGPREFIX2 = "     - "


print()


def get_action_args(pkgname, action_type_enum):
    """
    ktr.get_action_args():
    is a function that returns arguments for Action() constructor as tuple.
    It only constructs Package() objects as needed.
    """
    assert isinstance(action_type, ActionType)

    action_args_dict = dict()
    action_args_dict[ActionType.BUILD] = (CLI_ARGS.force,)
    action_args_dict[ActionType.CHAIN] = (CLI_ARGS.force,)
    action_args_dict[ActionType.CLEAN] = (CLI_ARGS.force,)
    action_args_dict[ActionType.CONSTRUCT] = (CLI_ARGS.force,)
    action_args_dict[ActionType.EXPORT] = (CLI_ARGS.force,)
    action_args_dict[ActionType.GET] = (CLI_ARGS.force,)
    action_args_dict[ActionType.REFRESH] = (CLI_ARGS.force,)
    action_args_dict[ActionType.STATUS] = (CLI_ARGS.force,)
    action_args_dict[ActionType.UPDATE] = (CLI_ARGS.force,)
    action_args_dict[ActionType.UPLOAD] = (CLI_ARGS.force,)
    action_args_dict[ActionType.VERIFY] = (CLI_ARGS.force,)

    action_args_dict[ActionType.CONFIG] = (CLI_ARGS.force,
                                           CLI_ARGS.config_section,
                                           CLI_ARGS.config_key,
                                           CLI_ARGS.config_value)
    action_args_dict[ActionType.CREATE] = (CLI_ARGS.force,)

    if action_type_enum == ActionType.CREATE:
        return (pkgname,) + action_args_dict[ActionType.CREATE]
    else:
        return (Package(pkgname),) + action_args_dict[action_type_enum]


# if no action is specified: exit
if CLI_ARGS.action is None:
    log(LOGPREFIX1 + "No action specified. Exiting.", 2)
    log(LOGPREFIX1 + "Use 'ktr --help' for more information.")
    print()
    raise SystemExit

ktr_bootstrap()

PKGS = list()

# if only specified packages are to be processed:
# process packages only
if not CLI_ARGS.packages_all:
    for name in CLI_ARGS.packages:
        PKGS.append(name)

# if all package are to be processed:
# get package configs present in CONFDIR
else:
    PKG_CONF_PATHS = glob.glob(os.path.join(KTR_CONF.confdir, "*.conf"))

    for pkg_conf_path in PKG_CONF_PATHS:
        PKGS.append(os.path.basename(pkg_conf_path).rstrip(".conf"))

# log list of found packages
log(LOGPREFIX1 + "Packages:", 2)
for package in PKGS:
    log(LOGPREFIX2 + package, 2)

# run action for every specified package
for name in PKGS:
    action_type = CLI_ARGS.action
    action = ACTION_DICT[action_type](*get_action_args(name, action_type))
    success = action.execute()

    if success:
        log(LOGPREFIX1 + "Success!")
    else:
        log(LOGPREFIX1 + "Not successful.")

print()

raise SystemExit

