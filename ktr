#!/usr/bin/env python3

"""
ktr is kentauros.py
"""

# this script is here for testing purposes
# it can only be executed if:
# - data/default.conf is present in an expected location
# - $HOME/.local/share/kentauros/configs/mesa.conf exists
# - $HOME/.local/share/kentauros/specs/mesa.specs exists

import glob
import os

from kentauros.init import DEBUG, VERBY, log
from kentauros.config import KTR_CONF
from kentauros.bootstrap import ktr_bootstrap
from kentauros.source.common import SourceType
from kentauros.package import Package


LOGPREFIX1 = "ktr: "
LOGPREFIX2 = "     - "


print()

log("ktr: DEBUG set: " + str(DEBUG), 0)
log("ktr: VERBOSITY: " + str(VERBY) + "/2", 1)

log("ktr: BASEDIR: " + KTR_CONF['main']['basedir'], 0)
log("ktr: CONFDIR: " + KTR_CONF['main']['confdir'], 0)
log("ktr: DATADIR: " + KTR_CONF['main']['datadir'], 0)
log("ktr: PACKDIR: " + KTR_CONF['main']['packdir'], 0)
log("ktr: SPECDIR: " + KTR_CONF['main']['specdir'], 0)


ktr_bootstrap()


# get package configs present in CONFDIR
PKG_CONF_PATHS = glob.glob(os.path.join(KTR_CONF['main']['confdir'], "*.conf"))

PKGS = []

for pkg_conf_path in PKG_CONF_PATHS:
    PKGS.append(os.path.basename(pkg_conf_path).rstrip(".conf"))

# log list of found packages
log(LOGPREFIX1 + "list of found packages:", 2)
for package in PKGS:
    log(LOGPREFIX2 + package, 2)


# process found packages
for package in PKGS:
    pkg = Package(package)

    pkg.source.get()
    update = pkg.source.update()

    # break if no update is found, but continue if source type is URL
    if (not update) and (pkg.source.type != SourceType.URL):
        log(LOGPREFIX1 + "No updates for " + package + ".", 2)
        break

    pkg.source.export()
    pkg.constructor.init()

    # reset release to 0 if update is found (version is incremented)
    if update:
        pkg.constructor.prepare(relreset=True)
    else:
        pkg.constructor.prepare(relreset=False)

    pkg.constructor.build()
    pkg.constructor.export()
    pkg.constructor.clean()

    local_success = pkg.builder.build()

    if local_success:
        pkg.uploader.upload()

print()

