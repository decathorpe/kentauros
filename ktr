#!/usr/bin/env python3

"""
ktr is kentauros.py
"""

import glob
import os

from kentauros.actions import ACTION_DICT
from kentauros.definitions import ActionType

from kentauros.init import log
from kentauros.init.cli import CLI_ARGS

from kentauros.config import KTR_CONF
from kentauros.bootstrap import ktr_bootstrap


LOGPREFIX1 = "ktr: "
LOGPREFIX2 = "     - "


print()

# if no action is specified: exit
if CLI_ARGS.get("action") == None:
    log(LOGPREFIX1 + "No action specified. Exiting.", 2)
    raise SystemExit

ktr_bootstrap()

PKGS = []

# if only specified packages are to be processed:
# process packages only
if not CLI_ARGS.get("packages_all"):
    for name in CLI_ARGS.get("packages"):
        PKGS.append(name)

# if all package are to be processed:
# get package configs present in CONFDIR
else:
    PKG_CONF_PATHS = glob.glob(os.path.join(KTR_CONF.confdir, "*.conf"))

    for pkg_conf_path in PKG_CONF_PATHS:
        PKGS.append(os.path.basename(pkg_conf_path).rstrip(".conf"))

# log list of found packages
log(LOGPREFIX1 + "Packages:", 2)
for package in PKGS:
    log(LOGPREFIX2 + package, 2)

# process config changes seperately
if CLI_ARGS.get("action") == ActionType.CONFIG:
    if not CLI_ARGS.get("confedit"):
        log(LOGPREFIX1 + "Configuration attempted to be edited, but insufficient arguments.", 2)
        print()
        raise SystemExit
    for name in PKGS:
        action = ACTION_DICT[CLI_ARGS.get("action")](name,
                                                     CLI_ARGS.get("config_section"),
                                                     CLI_ARGS.get("config_key"),
                                                     CLI_ARGS.get("config_value"))
        action.execute()

# process found packages, if the requested action is not a configuration change
else:
    for name in PKGS:
        action = ACTION_DICT[CLI_ARGS.get("action")](name, CLI_ARGS.get("force"))
        action.execute()

print()

